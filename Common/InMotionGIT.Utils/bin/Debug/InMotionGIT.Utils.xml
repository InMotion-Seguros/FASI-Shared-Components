<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InMotionGIT.Utils</name>
    </assembly>
    <members>
        <member name="T:Helpers.CompareObjects">
             <summary>
             Class that allows comparison of two objects of the same type to each other.  Supports classes, lists, arrays, dictionaries, child comparison and more.
             </summary>
             <example>
             
             CompareObjects compareObjects = new CompareObjects();
             
             Person person1 = new Person();
             person1.DateCreated = DateTime.Now;
             person1.Name = "Greg";
            
             Person person2 = new Person();
             person2.Name = "John";
             person2.DateCreated = person1.DateCreated;
            
             if (!compareObjects.Compare(person1, person2))
                Console.WriteLine(compareObjects.DifferencesString);
             
             </example>
        </member>
        <member name="F:Helpers.CompareObjects._parents">
            <summary>
            Keep track of parent objects in the object hiearchy
            </summary>
        </member>
        <member name="F:Helpers.CompareObjects._propertyCache">
            <summary>
            Reflection Cache for property info
            </summary>
        </member>
        <member name="F:Helpers.CompareObjects._fieldCache">
            <summary>
            Reflection Cache for field info
            </summary>
        </member>
        <member name="F:Helpers.CompareObjects._methodList">
            <summary>
            Reflection Cache for methods
            </summary>
        </member>
        <member name="P:Helpers.CompareObjects.ElementsToIgnore">
            <summary>
            Ignore classes, properties, or fields by name during the comparison.
            Case sensitive.
            </summary>
            <example>ElementsToIgnore.Add("CreditCardNumber")</example>
        </member>
        <member name="P:Helpers.CompareObjects.ComparePrivateProperties">
            <summary>
            If true, private properties and fields will be compared. The default is false.
            </summary>
        </member>
        <member name="P:Helpers.CompareObjects.ComparePrivateFields">
            <summary>
            If true, private fields will be compared. The default is false.
            </summary>
        </member>
        <member name="P:Helpers.CompareObjects.CompareStaticProperties">
            <summary>
            If true, static properties will be compared.  The default is true.
            </summary>
        </member>
        <member name="P:Helpers.CompareObjects.CompareStaticFields">
            <summary>
            If true, static fields will be compared.  The default is true.
            </summary>
        </member>
        <member name="P:Helpers.CompareObjects.CompareChildren">
            <summary>
            If true, child objects will be compared. The default is true. 
            If false, and a list or array is compared list items will be compared but not their children.
            </summary>
        </member>
        <member name="P:Helpers.CompareObjects.CompareReadOnly">
            <summary>
            If true, compare read only properties (only the getter is implemented).
            The default is true.
            </summary>
        </member>
        <member name="P:Helpers.CompareObjects.CompareFields">
            <summary>
            If true, compare fields of a class (see also CompareProperties).
            The default is true.
            </summary>
        </member>
        <member name="P:Helpers.CompareObjects.CompareProperties">
            <summary>
            If true, compare properties of a class (see also CompareFields).
            The default is true.
            </summary>
        </member>
        <member name="P:Helpers.CompareObjects.MaxDifferences">
            <summary>
            The maximum number of differences to detect
            </summary>
            <remarks>
            Default is 1 for performance reasons.
            </remarks>
        </member>
        <member name="P:Helpers.CompareObjects.Differences">
            <summary>
            The differences found during the compare
            </summary>
        </member>
        <member name="P:Helpers.CompareObjects.DifferencesString">
            <summary>
            The differences found in a string suitable for a textbox
            </summary>
        </member>
        <member name="P:Helpers.CompareObjects.AutoClearCache">
            <summary>
            Reflection properties and fields are cached. By default this cache is cleared after each compare.  Set to false to keep the cache for multiple compares.
            </summary>
            <seealso cref="P:Helpers.CompareObjects.Caching"/>
            <seealso cref="M:Helpers.CompareObjects.ClearCache"/>
        </member>
        <member name="P:Helpers.CompareObjects.Caching">
            <summary>
            By default properties and fields for types are cached for each compare.  By default this cache is cleared after each compare.
            </summary>
            <seealso cref="P:Helpers.CompareObjects.AutoClearCache"/>
            <seealso cref="M:Helpers.CompareObjects.ClearCache"/>
        </member>
        <member name="P:Helpers.CompareObjects.AttributesToIgnore">
            <summary>
            A list of attributes to ignore a class, property or field
            </summary>
            <example>AttributesToIgnore.Add(typeof(XmlIgnoreAttribute));</example>
        </member>
        <member name="P:Helpers.CompareObjects.IgnoreObjectTypes">
            <summary>
            If true, objects will be compared ignore their type diferences
            </summary>
        </member>
        <member name="M:Helpers.CompareObjects.#ctor">
            <summary>
            Set up defaults for the comparison
            </summary>
        </member>
        <member name="M:Helpers.CompareObjects.Compare(System.Object,System.Object)">
            <summary>
            Compare two objects of the same type to each other.
            </summary>
            <remarks>
            Check the Differences or DifferencesString Properties for the differences.
            Default MaxDifferences is 1 for performance
            </remarks>
            <param name="object1"></param>
            <param name="object2"></param>
            <returns>True if they are equal</returns>
        </member>
        <member name="M:Helpers.CompareObjects.ClearCache">
            <summary>
            Reflection properties and fields are cached. By default this cache is cleared automatically after each compare.
            </summary>
            <seealso cref="P:Helpers.CompareObjects.AutoClearCache"/>
            <seealso cref="P:Helpers.CompareObjects.Caching"/>
        </member>
        <member name="M:Helpers.CompareObjects.Compare(System.Object,System.Object,System.String)">
            <summary>
            Compare two objects
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb">Where we are in the object hiearchy</param>
        </member>
        <member name="M:Helpers.CompareObjects.CompareTimespan(System.Object,System.Object,System.String)">
            <summary>
            Compare a timespan struct
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:Helpers.CompareObjects.ComparePointer(System.Object,System.Object,System.String)">
            <summary>
            Compare a pointer struct
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:Helpers.CompareObjects.CompareEnum(System.Object,System.Object,System.String)">
            <summary>
            Compare an enumeration
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:Helpers.CompareObjects.CompareSimpleType(System.Object,System.Object,System.String)">
            <summary>
            Compare a simple type
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:Helpers.CompareObjects.CompareStruct(System.Object,System.Object,System.String)">
            <summary>
            Compare a struct
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:Helpers.CompareObjects.CompareClass(System.Object,System.Object,System.String)">
            <summary>
            Compare the properties, fields of a class
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:Helpers.CompareObjects.PerformCompareFields(System.Type,System.Object,System.Object,System.Boolean,System.String)">
            <summary>
            Compare the fields of a class
            </summary>
            <param name="t1"></param>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="structCompare"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:Helpers.CompareObjects.PerformCompareProperties(System.Type,System.Object,System.Object,System.Boolean,System.String)">
            <summary>
            Compare the properties of a class
            </summary>
            <param name="t1"></param>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="structCompare"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:Helpers.CompareObjects.CompareIDictionary(System.Object,System.Object,System.String)">
            <summary>
            Compare a dictionary
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:Helpers.CompareObjects.CompareIList(System.Object,System.Object,System.String)">
            <summary>
            Compare an array or something that implements IList
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:Helpers.CompareObjects.IgnoredByAttribute(System.Type)">
            <summary>
            Check if any type has attributes that should be bypassed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Helpers.CompareObjects.GetMethod(System.Type,System.String)">
            <summary>
            Get a method by name
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Helpers.CompareObjects.GetMethods(System.Type)">
            <summary>
            Get the cached methods for a type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Helpers.CompareObjects.NiceString(System.Object)">
            <summary>
            Convert an object to a nicely formatted string
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Helpers.CompareObjects.AddBreadCrumb(System.String,System.String,System.String,System.Int32)">
            <summary>
            Add a breadcrumb to an existing breadcrumb
            </summary>
            <param name="existing"></param>
            <param name="name"></param>
            <param name="extra"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Helpers.CompareObjects.AddBreadCrumb(System.String,System.String,System.String,System.String)">
            <summary>
            Add a breadcrumb to an existing breadcrumb
            </summary>
            <param name="existing"></param>
            <param name="name"></param>
            <param name="extra"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.Utils.Helpers.DynamicActivityStore">
            <summary>
            Implements a cache of DynamicActivity instances.
            </summary>
        </member>
        <member name="F:InMotionGIT.Utils.Helpers.DynamicActivityStore.envVarSearchExpression">
            <summary>
            The regular expression that matches the first occurence of an environment variable.
            </summary>
        </member>
        <member name="F:InMotionGIT.Utils.Helpers.DynamicActivityStore.activityDictionary">
            <summary>
            A thread safe dictionary holding DynamicActivity instances keyed by their file path (environment vars unresolved).
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.DynamicActivityStore.GetActivity(System.String,System.String)">
            <summary>
            Returns the requested activity from the cache. If not found, loads the activity from the supplied path, caches it and returns the activity.
            </summary>
            <param name="path">The path which is the unique identifier of the required activity.</param>
            <param name="key"></param>
            <returns>The requested activity.</returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.DynamicActivityStore.RemoveKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.DynamicActivityStore.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.DynamicActivityStore.ContainsKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.DynamicActivityStore.ReplaceEnvironmentVariables(System.String)">
            <summary>
            Resolves all environement variables in the supplied path. Nested environment variables are recursively resolved.
            </summary>
            <param name="path">The file path that requires resolving.</param>
            <returns>A string with the environment variables delimited with % resolved to their values.</returns>
        </member>
        <member name="T:InMotionGIT.Utils.Helpers.Property.PropertySpec">
            <summary>
            Represents a single property in a PropertySpec.
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category"></param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.Type,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.String,System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The fully qualified name of the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The fully qualified name of the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.Type,System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The fully qualified name of the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The fully qualified name of the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.String,System.String,System.String,System.Object,System.Type,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The Type that represents the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The fully qualified name of the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.Type,System.String,System.String,System.Object,System.Type,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The Type that represents the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The fully qualified name of the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.String,System.String,System.String,System.Object,System.String,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The fully qualified name of the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The Type that represents the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.Type,System.String,System.String,System.Object,System.String,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The fully qualified name of the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The Type that represents the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.String,System.String,System.String,System.Object,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The Type that represents the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The Type that represents the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpec.#ctor(System.String,System.Type,System.String,System.String,System.Object,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The Type that represents the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The Type that represents the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertySpec.Attributes">
            <summary>
            Gets or sets a collection of additional Attributes for this property.  This can
            be used to specify attributes beyond those supported intrinsically by the
            PropertySpec class, such as ReadOnly and Browsable.
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertySpec.Category">
            <summary>
            Gets or sets the category name of this property.
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertySpec.ConverterTypeName">
            <summary>
            Gets or sets the fully qualified name of the type converter
            type for this property.
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertySpec.DefaultValue">
            <summary>
            Gets or sets the default value of this property.
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertySpec.Description">
            <summary>
            Gets or sets the help text description of this property.
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertySpec.EditorTypeName">
            <summary>
            Gets or sets the fully qualified name of the editor type for
            this property.
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertySpec.Name">
            <summary>
            Gets or sets the name of this property.
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertySpec.TypeName">
            <summary>
            Gets or sets the fully qualfied name of the type of this
            property.
            </summary>
        </member>
        <member name="T:InMotionGIT.Utils.Helpers.Property.PropertySpecEventArgs">
            <summary>
            Provides data for the GetValue and SetValue events of the PropertyBag class.
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertySpecEventArgs.#ctor(InMotionGIT.Utils.Helpers.Property.PropertySpec,System.Object)">
            <summary>
            Initializes a new instance of the PropertySpecEventArgs class.
            </summary>
            <param name="property">The PropertySpec that represents the property whose
            value is being requested or set.</param>
            <param name="val">The current value of the property.</param>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertySpecEventArgs.Property">
            <summary>
            Gets the PropertySpec that represents the property whose value is being
            requested or set.
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertySpecEventArgs.Value">
            <summary>
            Gets or sets the current value of the property.
            </summary>
        </member>
        <member name="T:InMotionGIT.Utils.Helpers.Property.PropertySpecEventHandler">
            <summary>
            Represents the method that will handle the GetValue and SetValue events of the
            PropertyBag class.
            </summary>
        </member>
        <member name="T:InMotionGIT.Utils.Helpers.Property.PropertyBag">
            <summary>
            Represents a collection of custom properties that can be selected into a
            PropertyGrid to provide functionality beyond that of the simple reflection
            normally used to query an object's properties.
            </summary>
        </member>
        <member name="T:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection">
            <summary>
            Encapsulates a collection of PropertySpec objects.
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.#ctor">
            <summary>
            Initializes a new instance of the PropertySpecCollection class.
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.Count">
            <summary>
            Gets the number of elements in the PropertySpecCollection.
            </summary>
            <value>
            The number of elements contained in the PropertySpecCollection.
            </value>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the PropertySpecCollection has a fixed size.
            </summary>
            <value>
            true if the PropertySpecCollection has a fixed size; otherwise, false.
            </value>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the PropertySpecCollection is read-only.
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <value>
            true if access to the PropertySpecCollection is synchronized (thread-safe); otherwise, false.
            </value>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
            <value>
            An object that can be used to synchronize access to the collection.
            </value>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            In C#, this property is the indexer for the PropertySpecCollection class.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>
            The element at the specified index.
            </value>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.Add(InMotionGIT.Utils.Helpers.Property.PropertySpec)">
            <summary>
            Adds a PropertySpec to the end of the PropertySpecCollection.
            </summary>
            <param name="value">The PropertySpec to be added to the end of the PropertySpecCollection.</param>
            <returns>The PropertySpecCollection index at which the value has been added.</returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.AddRange(InMotionGIT.Utils.Helpers.Property.PropertySpec[])">
            <summary>
            Adds the elements of an array of PropertySpec objects to the end of the PropertySpecCollection.
            </summary>
            <param name="array">The PropertySpec array whose elements should be added to the end of the
            PropertySpecCollection.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.Clear">
            <summary>
            Removes all elements from the PropertySpecCollection.
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.Contains(InMotionGIT.Utils.Helpers.Property.PropertySpec)">
            <summary>
            Determines whether a PropertySpec is in the PropertySpecCollection.
            </summary>
            <param name="item">The PropertySpec to locate in the PropertySpecCollection. The element to locate
            can be a null reference (Nothing in Visual Basic).</param>
            <returns>true if item is found in the PropertySpecCollection; otherwise, false.</returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.Contains(System.String)">
            <summary>
            Determines whether a PropertySpec with the specified name is in the PropertySpecCollection.
            </summary>
            <param name="name">The name of the PropertySpec to locate in the PropertySpecCollection.</param>
            <returns>true if item is found in the PropertySpecCollection; otherwise, false.</returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.CopyTo(InMotionGIT.Utils.Helpers.Property.PropertySpec[])">
            <summary>
            Copies the entire PropertySpecCollection to a compatible one-dimensional Array, starting at the
            beginning of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied
            from PropertySpecCollection. The Array must have zero-based indexing.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.CopyTo(InMotionGIT.Utils.Helpers.Property.PropertySpec[],System.Int32)">
            <summary>
            Copies the PropertySpecCollection or a portion of it to a one-dimensional array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied
            from the collection.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the PropertySpecCollection.
            </summary>
            <returns>An IEnumerator for the entire PropertySpecCollection.</returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.IndexOf(InMotionGIT.Utils.Helpers.Property.PropertySpec)">
            <summary>
            Searches for the specified PropertySpec and returns the zero-based index of the first
            occurrence within the entire PropertySpecCollection.
            </summary>
            <param name="value">The PropertySpec to locate in the PropertySpecCollection.</param>
            <returns>The zero-based index of the first occurrence of value within the entire PropertySpecCollection,
            if found; otherwise, -1.</returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.IndexOf(System.String)">
            <summary>
            Searches for the PropertySpec with the specified name and returns the zero-based index of
            the first occurrence within the entire PropertySpecCollection.
            </summary>
            <param name="name">The name of the PropertySpec to locate in the PropertySpecCollection.</param>
            <returns>The zero-based index of the first occurrence of value within the entire PropertySpecCollection,
            if found; otherwise, -1.</returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.Insert(System.Int32,InMotionGIT.Utils.Helpers.Property.PropertySpec)">
            <summary>
            Inserts a PropertySpec object into the PropertySpecCollection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The PropertySpec to insert.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.Remove(InMotionGIT.Utils.Helpers.Property.PropertySpec)">
            <summary>
            Removes the first occurrence of a specific object from the PropertySpecCollection.
            </summary>
            <param name="obj">The PropertySpec to remove from the PropertySpecCollection.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.Remove(System.String)">
            <summary>
            Removes the property with the specified name from the PropertySpecCollection.
            </summary>
            <param name="name">The name of the PropertySpec to remove from the PropertySpecCollection.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the object at the specified index of the PropertySpecCollection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.ToArray">
            <summary>
            Copies the elements of the PropertySpecCollection to a new PropertySpec array.
            </summary>
            <returns>A PropertySpec array containing copies of the elements of the PropertySpecCollection.</returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.PropertySpecCollection.ItemByName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.#ctor">
            <summary>
            Initializes a new instance of the PropertyBag class.
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertyBag.DefaultProperty">
            <summary>
            Gets or sets the name of the default property in the collection.
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertyBag.Properties">
            <summary>
            Gets the collection of properties contained within this PropertyBag.
            </summary>
        </member>
        <member name="E:InMotionGIT.Utils.Helpers.Property.PropertyBag.GetValue">
            <summary>
            Occurs when a PropertyGrid requests the value of a property.
            </summary>
        </member>
        <member name="E:InMotionGIT.Utils.Helpers.Property.PropertyBag.SetValue">
            <summary>
            Occurs when the user changes the value of a property in a PropertyGrid.
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.OnGetValue(InMotionGIT.Utils.Helpers.Property.PropertySpecEventArgs)">
            <summary>
            Raises the GetValue event.
            </summary>
            <param name="e">A PropertySpecEventArgs that contains the event data.</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyBag.OnSetValue(InMotionGIT.Utils.Helpers.Property.PropertySpecEventArgs)">
            <summary>
            Raises the SetValue event.
            </summary>
            <param name="e">A PropertySpecEventArgs that contains the event data.</param>
        </member>
        <member name="T:InMotionGIT.Utils.Helpers.Property.PropertyTable">
            <summary>
            An extension of PropertyBag that manages a table of property values, in
            addition to firing events when property values are requested or set.
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyTable.#ctor">
            <summary>
            Initializes a new instance of the PropertyTable class.
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.Property.PropertyTable.Item(System.String)">
            <summary>
            Gets or sets the value of the property with the specified name.
            <p>In C#, this property is the indexer of the PropertyTable class.</p>
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyTable.OnGetValue(InMotionGIT.Utils.Helpers.Property.PropertySpecEventArgs)">
            <summary>
            This member overrides PropertyBag.OnGetValue.
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Property.PropertyTable.OnSetValue(InMotionGIT.Utils.Helpers.Property.PropertySpecEventArgs)">
            <summary>
            This member overrides PropertyBag.OnSetValue.
            </summary>
        </member>
        <member name="T:InMotionGIT.Utils.Helpers.IThreadSafeDictionary`2">
            <summary>
            Thread Safe Dictionary in .NET with ReaderWriterLockSlim
            http://devplanet.com/blogs/brianr/archive/2008/09/26/thread-safe-dictionary-in-net.aspx
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.IThreadSafeDictionary`2.MergeSafe(`0,`1)">
            <summary>
            Merge is similar to the SQL merge or upsert statement.  
            </summary>
            <param name="key">Key to lookup</param>
            <param name="newValue">New Value</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.IThreadSafeDictionary`2.RemoveSafe(`0)">
            <summary>
            This is a blind remove. Prevents the need to check for existence first.
            </summary>
            <param name="key">Key to Remove</param>
        </member>
        <member name="T:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2">
            <summary>
            Thread Safe Dictionary in .NET with ReaderWriterLockSlim
            http://devplanet.com/blogs/brianr/archive/2008/09/26/thread-safe-dictionary-in-net.aspx
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.RemoveSafe(`0)">
            <summary>
            This is a blind remove. Prevents the need to check for existence first.
            </summary>
            <param name="key">Key to remove</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.MergeSafe(`0,`1)">
            <summary>
            Merge does a blind remove, and then add.  Basically a blind Upsert.  
            </summary>
            <param name="key">Key to lookup</param>
            <param name="newValue">New Value</param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.ContainsKey(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.Item(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.Values">
            <summary>
            
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.Add(`0,`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ThreadSafeDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.Utils.Helpers.Locks">
            <summary>
            
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Locks.GetReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            
            </summary>
            <param name="locks"></param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Locks.GetReadOnlyLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            
            </summary>
            <param name="locks"></param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Locks.GetWriteLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            
            </summary>
            <param name="locks"></param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Locks.ReleaseReadOnlyLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            
            </summary>
            <param name="locks"></param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Locks.ReleaseReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            
            </summary>
            <param name="locks"></param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Locks.ReleaseWriteLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            
            </summary>
            <param name="locks"></param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Locks.ReleaseLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            
            </summary>
            <param name="locks"></param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Locks.GetLockInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.Locks.GetLockInstance(System.Threading.LockRecursionPolicy)">
            <summary>
            
            </summary>
            <param name="recursionPolicy"></param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.Utils.Helpers.BaseLock">
            <summary>
            
            </summary>
        </member>
        <member name="F:InMotionGIT.Utils.Helpers.BaseLock._Locks">
            <summary>
            
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.BaseLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            
            </summary>
            <param name="locks"></param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.BaseLock.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:InMotionGIT.Utils.Helpers.ReadLock">
            <summary>
            
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            
            </summary>
            <param name="locks"></param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ReadLock.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:InMotionGIT.Utils.Helpers.ReadOnlyLock">
            <summary>
            
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ReadOnlyLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            
            </summary>
            <param name="locks"></param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.ReadOnlyLock.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:InMotionGIT.Utils.Helpers.WriteLock">
            <summary>
            
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.WriteLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            
            </summary>
            <param name="locks"></param>
        </member>
        <member name="M:InMotionGIT.Utils.Helpers.WriteLock.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:InMotionGIT.Utils.Reflection.Query">
            <summary>
              <para>Static class containing Extension methods for Reflection Query</para>
            </summary>
        </member>
        <member name="F:InMotionGIT.Utils.Reflection.Query.FilterRE">
            <summary>
              <para>Regex to find filters in a query</para>
              <para>Matches operators to check for values in sub objects e.g. Path=Value</para>
              <para>Matches numeric values which are considered indexers</para>
            </summary>
        </member>
        <member name="M:InMotionGIT.Utils.Reflection.Query.GetValue``1(System.Object,System.String)">
            <summary>
              <para>Get the first value given a query</para>
            </summary>
            <typeparam name = "T">Value type</typeparam>
            <param name = "data">Data</param>
            <param name = "query">Query</param>
            <returns>First or throws sequence exception</returns>
        </member>
        <member name="M:InMotionGIT.Utils.Reflection.Query.GetValue``1(System.Object,System.String,``0)">
            <summary>
              <para>Get the first value given a query</para>
            </summary>
            <typeparam name = "T">Value type</typeparam>
            <param name = "data">Data</param>
            <param name = "query">Query</param>
            <param name = "def">Default value</param>
            <returns>First or default</returns>
        </member>
        <member name="M:InMotionGIT.Utils.Reflection.Query.GetValues``1(System.Object,System.String)">
            <summary>
              <para>Query an object using reflection</para>
            </summary>
        </member>
    </members>
</doc>
