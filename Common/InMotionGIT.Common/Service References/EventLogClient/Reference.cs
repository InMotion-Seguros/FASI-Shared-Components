// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:4.0.30319.42000
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------


using System;
using System.Diagnostics;
using System.Runtime.Serialization;

namespace InMotionGIT.Common.EventLogClient
{

    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "EventLog", Namespace = "http://schemas.datacontract.org/2004/07/InMotionGIT.EventLog.Contracts")]
    [Serializable()]
    public partial class EventLog : object, IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {

        [NonSerialized()]
        private ExtensionDataObject extensionDataField;

        [OptionalField()]
        private string CodeField;

        [OptionalField()]
        private string EntryField;

        [OptionalField()]
        private EventLogDetail EventLogDetailField;

        [OptionalField()]
        private DateTime FactTimeField;

        [OptionalField()]
        private string HostSourceField;

        [OptionalField()]
        private int IDField;

        [OptionalField()]
        private string SourceField;

        [OptionalField()]
        private int TypeTraceField;

        [System.ComponentModel.Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get
            {
                return extensionDataField;
            }
            set
            {
                extensionDataField = value;
            }
        }

        [DataMember()]
        public string Code
        {
            get
            {
                return CodeField;
            }
            set
            {
                if (ReferenceEquals(CodeField, value) != true)
                {
                    CodeField = value;
                    RaisePropertyChanged("Code");
                }
            }
        }

        [DataMember()]
        public string Entry
        {
            get
            {
                return EntryField;
            }
            set
            {
                if (ReferenceEquals(EntryField, value) != true)
                {
                    EntryField = value;
                    RaisePropertyChanged("Entry");
                }
            }
        }

        [DataMember()]
        public EventLogDetail EventLogDetail
        {
            get
            {
                return EventLogDetailField;
            }
            set
            {
                if (ReferenceEquals(EventLogDetailField, value) != true)
                {
                    EventLogDetailField = value;
                    RaisePropertyChanged("EventLogDetail");
                }
            }
        }

        [DataMember()]
        public DateTime FactTime
        {
            get
            {
                return FactTimeField;
            }
            set
            {
                if (FactTimeField.Equals(value) != true)
                {
                    FactTimeField = value;
                    RaisePropertyChanged("FactTime");
                }
            }
        }

        [DataMember()]
        public string HostSource
        {
            get
            {
                return HostSourceField;
            }
            set
            {
                if (ReferenceEquals(HostSourceField, value) != true)
                {
                    HostSourceField = value;
                    RaisePropertyChanged("HostSource");
                }
            }
        }

        [DataMember()]
        public int ID
        {
            get
            {
                return IDField;
            }
            set
            {
                if (IDField.Equals(value) != true)
                {
                    IDField = value;
                    RaisePropertyChanged("ID");
                }
            }
        }

        [DataMember()]
        public string Source
        {
            get
            {
                return SourceField;
            }
            set
            {
                if (ReferenceEquals(SourceField, value) != true)
                {
                    SourceField = value;
                    RaisePropertyChanged("Source");
                }
            }
        }

        [DataMember()]
        public int TypeTrace
        {
            get
            {
                return TypeTraceField;
            }
            set
            {
                if (TypeTraceField.Equals(value) != true)
                {
                    TypeTraceField = value;
                    RaisePropertyChanged("TypeTrace");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged is not null)
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "EventLogDetail", Namespace = "http://schemas.datacontract.org/2004/07/InMotionGIT.EventLog.Contracts")]
    [Serializable()]
    public partial class EventLogDetail : object, IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {

        [NonSerialized()]
        private ExtensionDataObject extensionDataField;

        [OptionalField()]
        private string DetailField;

        [OptionalField()]
        private int IDField;

        [System.ComponentModel.Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get
            {
                return extensionDataField;
            }
            set
            {
                extensionDataField = value;
            }
        }

        [DataMember()]
        public string Detail
        {
            get
            {
                return DetailField;
            }
            set
            {
                if (ReferenceEquals(DetailField, value) != true)
                {
                    DetailField = value;
                    RaisePropertyChanged("Detail");
                }
            }
        }

        [DataMember()]
        public int ID
        {
            get
            {
                return IDField;
            }
            set
            {
                if (IDField.Equals(value) != true)
                {
                    IDField = value;
                    RaisePropertyChanged("ID");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged is not null)
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContract(ConfigurationName = "EventLogClient.IManager")]
    public interface IManager
    {

        [System.ServiceModel.OperationContract(IsOneWay = true, Action = "http://tempuri.org/IManager/LogSave")]
        void LogSave(EventLog eventLog);
    }

    [System.CodeDom.Compiler.GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public interface IManagerChannel : IManager, System.ServiceModel.IClientChannel
    {
    }

    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public partial class ManagerClient : System.ServiceModel.ClientBase<IManager>, IManager
    {

        public ManagerClient() : base()
        {
        }

        public ManagerClient(string endpointConfigurationName) : base(endpointConfigurationName)
        {
        }

        public ManagerClient(string endpointConfigurationName, string remoteAddress) : base(endpointConfigurationName, remoteAddress)
        {
        }

        public ManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : base(endpointConfigurationName, remoteAddress)
        {
        }

        public ManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : base(binding, remoteAddress)
        {
        }

        public void LogSave(EventLog eventLog)
        {
            Channel.LogSave(eventLog);
        }
    }
}